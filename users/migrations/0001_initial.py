# Generated by Django 3.1.3 on 2020-11-14 21:58

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='имя')),
                ('email', models.CharField(max_length=50, verbose_name='email')),
                ('subject', models.CharField(max_length=100, verbose_name='тема сообщения')),
                ('message', models.CharField(max_length=400, verbose_name='текст сообщения')),
                ('date', models.DateTimeField(auto_now_add=True, verbose_name='время отправки')),
            ],
            options={
                'verbose_name': 'сообщение с формы обратной связи',
                'verbose_name_plural': 'сообщения с формы обратной связи',
                'db_table': 'feedback',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('username', models.CharField(db_index=True, max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', message='Enter a valid username. This value may contain only letters, numbers and [@/./+/-] characters.')], verbose_name='имя пользователя в системе')),
                ('email', models.EmailField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid e-mail', regex='\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*')], verbose_name='электронная почта')),
                ('first_name', models.CharField(blank=True, max_length=40, null=True, verbose_name='имя пользователя')),
                ('last_name', models.CharField(blank=True, max_length=40, null=True, verbose_name='фамилия пользователя')),
                ('photo', models.ImageField(blank=True, default='photos/profileimage.jpg', null=True, upload_to='photos/', verbose_name='фото')),
                ('is_admin', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='последнее обновление')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
                'db_table': 'users',
            },
        ),
    ]
